{"version":3,"file":"lazy-mount.js","sources":["../../src/components/lazy-mount.hbs","../../src/components/lazy-mount.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{this.initLoadEngine @name}}\\n{{#if this.isLoading}}\\n  {{yield (hash isLoading=true error=null)}}\\n{{else if this.error}}\\n  {{yield (hash isLoading=false error=this.error)}}\\n{{else if this.loadedName}}\\n  {{mount this.loadedName model=@model}}\\n{{/if}}\\n\")","// eslint-disable-next-line ember/no-classic-components\nimport Component from '@ember/component';\nimport { assert } from '@ember/debug';\nimport { action, setProperties } from '@ember/object';\nimport { inject as service } from '@ember/service';\nimport { buildWaiter } from '@ember/test-waiters';\n\nimport type EngineLoaderService from '../services/engine-loader.ts';\n\nconst waiter = buildWaiter('ember-lazy-mount:lazy-mount');\n\ninterface LazyMountSignature {\n  Args: {\n    name: string;\n    model: unknown;\n  };\n  Blocks: {\n    default: [\n      | { isLoading: true; error: null }\n      | { isLoading: false; error: Error }\n      | undefined,\n    ];\n  };\n}\n\n/**\n * The `{{lazy-mount}}` component works just like the\n * [`{{mount}}` helper](https://api.emberjs.com/ember/5.9/classes/Ember.Templates.helpers/methods/mount?anchor=mount).\n *\n * It accepts the name of the engine as a positional parameter and also an\n * optional `model` parameter.\n *\n * As soon as the helper is rendered, it will begin loading the specified\n * engine. If the engine is already loaded, it will be mounted immediately.\n *\n * The `engineName` and `model` parameters are dynamic and you can update them.\n * Setting a new `engineName` will cause the new engine to be loaded and mounted.\n *\n * #### Inline Usage\n *\n * While the engine is loading, nothing is rendered. If there was an error\n * loading the engine, nothing is rendered.\n *\n * ```hbs\n * {{lazy-mount engineName model=optionalDataForTheEngine}}\n * ```\n *\n * #### Block Usage\n *\n * While the engine is loading or if there was an error loading the engine, the\n * block that is passed to the component is rendered. The `engine` block\n * parameter is an object with two properties:\n *\n * - **`isLoading`**: _`boolean`_ â€” Whether or not the engine is currently\n *   loading\n * - **`error`**: _`Error | null`_ â€” If there was an error loading the engine\n *\n * When the engine was loaded successfully, the passed in block is replaced by\n * the engine.\n *\n * ```hbs\n * {{#lazy-mount this.engineName model=this.optionalDataForTheEngine as |engine|}}\n *   {{#if engine.isLoading}}\n *     ðŸ•‘ The engine is loading...\n *   {{else if engine.error}}\n *     ðŸ˜¨ There was an error loading the engine:\n *     <code>{{engine.error}}</code>\n *   {{/if}}\n * {{/lazy-mount}}\n * ```\n *\n * @class LazyMountComponent\n * @param {string} name Name of the engine to mount.\n * @param {any} [model] Object that will be set as\n *                      the model of the engine.\n * @public\n */\nexport default class LazyMount extends Component<LazyMountSignature> {\n  tagName = '';\n\n  @service declare engineLoader: EngineLoaderService;\n\n  /**\n   * The name of the engine to load and subsequently mount.\n   *\n   * @property name\n   * @type {string}\n   * @public\n   */\n  name: string | null = null;\n\n  /**\n   * Optional model that will be passed through to the engine.\n   *\n   * @see https://emberjs.com/api/ember/3.7/classes/Ember.Templates.helpers/methods/mount?anchor=mount\n   *\n   * @property model\n   * @type {any?}\n   * @public\n   */\n  model: unknown = null;\n\n  /**\n   * Optional callback called when the engine starts loading.\n   *\n   * @property onLoad\n   * @type {(() => void)?}\n   * @public\n   */\n  onLoad: (() => void) | null = null;\n\n  /**\n   * Optional callback called when the engine finished loading.\n   *\n   * @property didLoad\n   * @type {(() => void)?}\n   * @public\n   */\n  didLoad: (() => void) | null = null;\n\n  /**\n   * Optional callback called when the engine filed to load.\n   *\n   * @property onLoad\n   * @type {((error: Error) => void)?}\n   * @public\n   */\n  onError: ((error: Error) => void) | null = null;\n\n  /**\n   * When the engine was loaded successfully, this will then be the name of the\n   * engine. Presence of this field therefore indicates that the engine was\n   * loaded successfully.\n   *\n   * This field is also used by `didReceiveAttrs` for diffing.\n   *\n   * @property loadedName\n   * @type {string?}\n   * @private\n   */\n  loadedName: string | null = null;\n\n  /**\n   * If an error occurred while loading the engine, it will be set here.\n   *\n   * @property error\n   * @type {Error?}\n   * @private\n   */\n  error: Error | null = null;\n\n  /**\n   * While the bundle is being loaded, this property is `true`.\n   *\n   * @property isLoading\n   * @type {boolean}\n   * @private\n   */\n  isLoading: boolean = false;\n\n  @action initLoadEngine(name: string): void {\n    assert(`lazy-mount: Argument 'name' is missing.`, name);\n\n    if (name !== this.loadedName) {\n      // only load a new engine, if it is different from the last one\n      this.loadEngine(name);\n    }\n  }\n\n  /**\n   * Manages the life cycle of loading an engine bundle and setting the\n   * following properties in accordance:\n   *\n   * - `isLoading`\n   * - `error`\n   * - `loadedName`\n   *\n   * Called by `didReceiveAttrs`.\n   *\n   * @method loadEngine\n   * @param {string} name\n   * @async\n   * @private\n   */\n  async loadEngine(name: string): Promise<void> {\n    const shouldCancel = this._thread();\n    const engineLoader = this.engineLoader;\n\n    this.setLoading();\n\n    if (!engineLoader.isLoaded(name)) {\n      const token = waiter.beginAsync();\n\n      try {\n        await engineLoader.load(name);\n        if (shouldCancel()) return;\n      } catch (error) {\n        if (shouldCancel()) return;\n        this.setError(error as Error);\n        return;\n      } finally {\n        waiter.endAsync(token);\n      }\n    }\n\n    this.setLoaded(name);\n  }\n\n  setLoading() {\n    this.onLoad?.();\n    setProperties(this, { loadedName: null, error: null, isLoading: true });\n  }\n\n  setLoaded(loadedName: string) {\n    this.didLoad?.();\n    setProperties(this, { loadedName, error: null, isLoading: false });\n  }\n\n  setError(error: Error) {\n    this.onError?.(error);\n    setProperties(this, { loadedName: null, error, isLoading: false });\n  }\n\n  /**\n   * The following is a really low-fidelity implementation of something that\n   * would be handled by ember-concurrency or ember-lifeline.\n   */\n  _threadId: Record<string, never> | null = null;\n\n  _thread() {\n    const threadId = (this._threadId = {});\n\n    return () =>\n      this.isDestroyed || this.isDestroying || this._threadId !== threadId;\n  }\n}\n\nLazyMount.reopenClass({\n  positionalParams: ['name'],\n});\n"],"names":["waiter","buildWaiter","LazyMount","Component","tagName","g","prototype","service","i","void 0","name","model","onLoad","didLoad","onError","loadedName","error","isLoading","initLoadEngine","assert","loadEngine","n","action","shouldCancel","_thread","engineLoader","setLoading","isLoaded","token","beginAsync","load","setError","endAsync","setLoaded","setProperties","_threadId","threadId","isDestroyed","isDestroying","reopenClass","positionalParams","setComponentTemplate","TEMPLATE"],"mappings":";;;;;;;;AACA,eAAe,kBAAkB,CAAC,oQAAoQ;;ACDtS;AASA,MAAMA,MAAM,GAAGC,WAAW,CAAC,6BAA6B,CAAC,CAAA;AAgBzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMC,SAAS,SAASC,SAAS,CAAqB;AACnEC,EAAAA,OAAO,GAAG,EAAE,CAAA;AAAC,EAAA;IAAAC,CAAA,CAAA,IAAA,CAAAC,SAAA,EAAA,cAAA,EAAA,CAEZC,MAAO,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAAA,aAAA,IAAAC,CAAA,CAAA,IAAA,EAAA,cAAA,CAAA,EAAAC,KAAA,CAAA,EAAA;AAER;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,IAAI,GAAkB,IAAI,CAAA;;AAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,GAAY,IAAI,CAAA;;AAErB;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAAM,GAAwB,IAAI,CAAA;;AAElC;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAO,GAAwB,IAAI,CAAA;;AAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,OAAO,GAAoC,IAAI,CAAA;;AAE/C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,UAAU,GAAkB,IAAI,CAAA;;AAEhC;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,GAAiB,IAAI,CAAA;;AAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,GAAY,KAAK,CAAA;EAElBC,cAAcA,CAACR,IAAY,EAAQ;AACzCS,IAAAA,MAAM,CAAC,CAAA,uCAAA,CAAyC,EAAET,IAAI,CAAC,CAAA;AAEvD,IAAA,IAAIA,IAAI,KAAK,IAAI,CAACK,UAAU,EAAE;AAC5B;AACA,MAAA,IAAI,CAACK,UAAU,CAACV,IAAI,CAAC,CAAA;AACvB,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdE,EAAA;IAAAW,CAAA,CAAA,IAAA,CAAAf,SAAA,EAAA,gBAAA,EAAA,CATCgB,MAAM,CAAA,CAAA,CAAA;AAAA,GAAA;EAwBP,MAAMF,UAAUA,CAACV,IAAY,EAAiB;AAC5C,IAAA,MAAMa,YAAY,GAAG,IAAI,CAACC,OAAO,EAAE,CAAA;AACnC,IAAA,MAAMC,YAAY,GAAG,IAAI,CAACA,YAAY,CAAA;IAEtC,IAAI,CAACC,UAAU,EAAE,CAAA;AAEjB,IAAA,IAAI,CAACD,YAAY,CAACE,QAAQ,CAACjB,IAAI,CAAC,EAAE;AAChC,MAAA,MAAMkB,KAAK,GAAG5B,MAAM,CAAC6B,UAAU,EAAE,CAAA;MAEjC,IAAI;AACF,QAAA,MAAMJ,YAAY,CAACK,IAAI,CAACpB,IAAI,CAAC,CAAA;QAC7B,IAAIa,YAAY,EAAE,EAAE,OAAA;OACrB,CAAC,OAAOP,KAAK,EAAE;QACd,IAAIO,YAAY,EAAE,EAAE,OAAA;AACpB,QAAA,IAAI,CAACQ,QAAQ,CAACf,KAAc,CAAC,CAAA;AAC7B,QAAA,OAAA;AACF,OAAC,SAAS;AACRhB,QAAAA,MAAM,CAACgC,QAAQ,CAACJ,KAAK,CAAC,CAAA;AACxB,OAAA;AACF,KAAA;AAEA,IAAA,IAAI,CAACK,SAAS,CAACvB,IAAI,CAAC,CAAA;AACtB,GAAA;AAEAgB,EAAAA,UAAUA,GAAG;IACX,IAAI,CAACd,MAAM,IAAI,CAAA;IACfsB,aAAa,CAAC,IAAI,EAAE;AAAEnB,MAAAA,UAAU,EAAE,IAAI;AAAEC,MAAAA,KAAK,EAAE,IAAI;AAAEC,MAAAA,SAAS,EAAE,IAAA;AAAK,KAAC,CAAC,CAAA;AACzE,GAAA;EAEAgB,SAASA,CAAClB,UAAkB,EAAE;IAC5B,IAAI,CAACF,OAAO,IAAI,CAAA;IAChBqB,aAAa,CAAC,IAAI,EAAE;MAAEnB,UAAU;AAAEC,MAAAA,KAAK,EAAE,IAAI;AAAEC,MAAAA,SAAS,EAAE,KAAA;AAAM,KAAC,CAAC,CAAA;AACpE,GAAA;EAEAc,QAAQA,CAACf,KAAY,EAAE;AACrB,IAAA,IAAI,CAACF,OAAO,GAAGE,KAAK,CAAC,CAAA;IACrBkB,aAAa,CAAC,IAAI,EAAE;AAAEnB,MAAAA,UAAU,EAAE,IAAI;MAAEC,KAAK;AAAEC,MAAAA,SAAS,EAAE,KAAA;AAAM,KAAC,CAAC,CAAA;AACpE,GAAA;;AAEA;AACF;AACA;AACA;AACEkB,EAAAA,SAAS,GAAiC,IAAI,CAAA;AAE9CX,EAAAA,OAAOA,GAAG;AACR,IAAA,MAAMY,QAAQ,GAAI,IAAI,CAACD,SAAS,GAAG,EAAG,CAAA;AAEtC,IAAA,OAAO,MACL,IAAI,CAACE,WAAW,IAAI,IAAI,CAACC,YAAY,IAAI,IAAI,CAACH,SAAS,KAAKC,QAAQ,CAAA;AACxE,GAAA;AACF,CAAA;AAEAlC,SAAS,CAACqC,WAAW,CAAC;EACpBC,gBAAgB,EAAE,CAAC,MAAM,CAAA;AAC3B,CAAC,CAAC,CAAA;AAACC,oBAAA,CAAAC,QAAA,EAlKkBxC,SAAS,CAAA;;;;"}